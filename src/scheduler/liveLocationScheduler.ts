import { Context } from 'telegraf';
import { OpenAIService } from '../services/openai';
import { LiveLocationSession } from '../types';

export class LiveLocationScheduler {
  private activeSessions = new Map<number, LiveLocationSession>();
  private readonly INTERVAL_MINUTES = 10;

  constructor(private openaiService: OpenAIService) {}

  startSession(session: LiveLocationSession, ctx: Context): void {
    const { chatId } = session;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    this.stopSession(chatId);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ 10 –º–∏–Ω—É—Ç
    const intervalId = setInterval(async () => {
      try {
        await this.sendScheduledFact(session, ctx);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–∫—Ç–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error);
      }
    }, this.INTERVAL_MINUTES * 60 * 1000);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é —Å intervalId
    const sessionWithInterval: LiveLocationSession = {
      ...session,
      intervalId,
    };

    this.activeSessions.set(chatId, sessionWithInterval);
    
    console.log(`Live-—Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.INTERVAL_MINUTES} –º–∏–Ω`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if (session.endTime) {
      const timeUntilEnd = session.endTime.getTime() - Date.now();
      if (timeUntilEnd > 0) {
        setTimeout(() => {
          this.stopSession(chatId);
          ctx.reply('‚è∞ Live-–ª–æ–∫–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.').catch(console.error);
        }, timeUntilEnd);
      }
    }
  }

  stopSession(chatId: number): void {
    const session = this.activeSessions.get(chatId);
    
    if (session?.intervalId) {
      clearInterval(session.intervalId);
      console.log(`Live-—Å–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
    }
    
    this.activeSessions.delete(chatId);
  }

  stopAllSessions(): void {
    console.log(`–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö live-—Å–µ—Å—Å–∏–π (${this.activeSessions.size})`);
    
    for (const [chatId] of this.activeSessions) {
      this.stopSession(chatId);
    }
  }

  private async sendScheduledFact(session: LiveLocationSession, ctx: Context): Promise<void> {
    const { chatId, location, lastFact } = session;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
    if (session.endTime && new Date() > session.endTime) {
      this.stopSession(chatId);
      await ctx.reply('‚è∞ Live-–ª–æ–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç
      const factResponse = await this.openaiService.getFact({
        latitude: location.latitude,
        longitude: location.longitude,
        radius: 500,
      });

      if (factResponse.success) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–∫—Ç –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
        if (factResponse.fact === lastFact) {
          console.log(`–ü–æ–ª—É—á–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ñ–∞–∫—Ç –¥–ª—è —á–∞—Ç–∞ ${chatId}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π...`);
          
          // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–∫—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º
          const retryResponse = await this.openaiService.getFact({
            latitude: location.latitude,
            longitude: location.longitude,
            radius: 1000,
          });

          if (retryResponse.success && retryResponse.fact !== lastFact) {
            await this.sendFactMessage(ctx, retryResponse.fact);
            this.updateLastFact(chatId, retryResponse.fact);
          } else {
            console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
          }
        } else {
          await this.sendFactMessage(ctx, factResponse.fact);
          this.updateLastFact(chatId, factResponse.fact);
        }
      } else {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, factResponse.error);
      }
    } catch (error) {
      console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–∫—Ç–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error);
    }
  }

  private async sendFactMessage(ctx: Context, fact: string): Promise<void> {
    await ctx.reply(
      `üìç *–ù–æ–≤—ã–π —Ñ–∞–∫—Ç –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏:*\n\n${fact}`,
      { parse_mode: 'Markdown' }
    );
  }

  private updateLastFact(chatId: number, fact: string): void {
    const session = this.activeSessions.get(chatId);
    if (session) {
      session.lastFact = fact;
      this.activeSessions.set(chatId, session);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  getActiveSessionsInfo(): Array<{ chatId: number; startTime: Date; endTime: Date | undefined }> {
    return Array.from(this.activeSessions.values()).map(session => ({
      chatId: session.chatId,
      startTime: session.startTime,
      endTime: session.endTime,
    }));
  }
} 