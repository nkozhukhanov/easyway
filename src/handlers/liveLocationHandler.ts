import { Context } from 'telegraf';
import { OpenAIService } from '../services/openai';
import { LiveLocationScheduler } from '../scheduler/liveLocationScheduler';
import { Location } from '../types';

export class LiveLocationHandler {
  private scheduler: LiveLocationScheduler;

  constructor(private openaiService: OpenAIService) {
    this.scheduler = new LiveLocationScheduler(openaiService);
  }

  async handle(ctx: Context): Promise<void> {
    try {
      if (!ctx.editedMessage || !('location' in ctx.editedMessage)) {
        return;
      }

      const location: Location = ctx.editedMessage.location;
      const chatId = ctx.chat?.id;

      if (!chatId) {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ live_period
      if (location.live_period && location.live_period > 0) {
        // –≠—Ç–æ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ live-–ª–æ–∫–∞—Ü–∏–∏
        console.log(`–ü–æ–ª—É—á–µ–Ω–∞ live-–ª–æ–∫–∞—Ü–∏—è –æ—Ç —á–∞—Ç–∞ ${chatId}, –ø–µ—Ä–∏–æ–¥: ${location.live_period}—Å`);
        
        // –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–∫—Ç
        const statusMessage = await ctx.reply('üîç –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏...');

        const factResponse = await this.openaiService.getFact({
          latitude: location.latitude,
          longitude: location.longitude,
          radius: 500,
        });

        try {
          await ctx.deleteMessage(statusMessage.message_id);
        } catch {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        }

        if (factResponse.success) {
          await ctx.reply(
            `üìç *Live-–ª–æ–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞!*\n\n${factResponse.fact}\n\nüîÑ _–ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç._`,
            { parse_mode: 'Markdown' }
          );

          // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
          this.scheduler.startSession({
            chatId,
            location,
            lastFact: factResponse.fact,
            startTime: new Date(),
            endTime: new Date(Date.now() + location.live_period * 1000),
          }, ctx);
        } else {
          await ctx.reply(
            'ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è live-–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
          );
        }
      } else {
        // –≠—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ live-–ª–æ–∫–∞—Ü–∏–∏
        console.log(`–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ live-–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç —á–∞—Ç–∞ ${chatId}`);
        this.scheduler.stopSession(chatId);
        
        await ctx.reply(
          '‚èπÔ∏è Live-–ª–æ–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!'
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ LiveLocationHandler:', error);
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ live-–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
      );
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
  stopAllSessions() {
    this.scheduler.stopAllSessions();
  }
} 