import { Telegraf } from 'telegraf';
import { config } from 'dotenv';
import { createServer } from 'http';
import { OpenAIService } from './services/openai';
import { LocationHandler } from './handlers/locationHandler';
import { LiveLocationHandler } from './handlers/liveLocationHandler';
import { Config } from './types';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function validateConfig(): Config {
  const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
  const openaiApiKey = process.env.OPENAI_API_KEY;
  const port = parseInt(process.env.PORT || '3000', 10);
  const nodeEnv = process.env.NODE_ENV || 'development';

  if (!telegramBotToken) {
    throw new Error('TELEGRAM_BOT_TOKEN is required');
  }

  if (!openaiApiKey) {
    throw new Error('OPENAI_API_KEY is required');
  }

  return {
    telegramBotToken,
    openaiApiKey,
    port,
    nodeEnv,
  };
}

async function main() {
  try {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const appConfig = validateConfig();
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ EasyWay Telegram Bot...');
    console.log(`üìç –†–µ–∂–∏–º: ${appConfig.nodeEnv}`);
    console.log(`üîå –ü–æ—Ä—Ç: ${appConfig.port}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    const openaiService = new OpenAIService(appConfig.openaiApiKey);
    const bot = new Telegraf(appConfig.telegramBotToken);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const locationHandler = new LocationHandler(openaiService);
    const liveLocationHandler = new LiveLocationHandler(openaiService);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    bot.on('location', async (ctx) => {
      await locationHandler.handle(ctx);
    });

    bot.on('edited_message', async (ctx) => {
      if (ctx.editedMessage && 'location' in ctx.editedMessage) {
        await liveLocationHandler.handle(ctx);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.start(async (ctx) => {
      await ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø EasyWay Bot.\n\n' +
        'üìç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –Ω–µ–º!\n\n' +
        'üîÑ –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è live-–ª–æ–∫–∞—Ü–∏—è ‚Äî –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.\n\n' +
        'üöÄ –ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!'
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏
    bot.help(async (ctx) => {
      await ctx.reply(
        '‚ùì *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*\n\n' +
        '1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∞–∫—Ç –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ\n' +
        '2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ live-–ª–æ–∫–∞—Ü–∏—é ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n' +
        '3Ô∏è‚É£ –§–∞–∫—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ 500 –º–µ—Ç—Ä–æ–≤ –æ—Ç –≤–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏\n\n' +
        '‚ö° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ OpenAI GPT-4o-mini',
        { parse_mode: 'Markdown' }
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    bot.on('text', async (ctx) => {
      await ctx.reply(
        'ü§î –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–∏.\n\n' +
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üìé ‚Üí –õ–æ–∫–∞—Ü–∏—è'
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    bot.catch((err, ctx) => {
      console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
      if (ctx) {
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.').catch(() => {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        });
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch();
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');

    // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck (–¥–ª—è Railway)
    const server = createServer((req, res) => {
      if (req.url === '/health') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ status: 'ok', timestamp: new Date().toISOString() }));
      } else {
        res.writeHead(404);
        res.end('Not Found');
      }
    });

    server.listen(appConfig.port, () => {
      console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${appConfig.port}`);
    });

    // Graceful shutdown
    process.once('SIGINT', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      bot.stop('SIGINT');
    });

    process.once('SIGTERM', () => {
      console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      bot.stop('SIGTERM');
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if (require.main === module) {
  main().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
} 